<!DOCTYPE html>
<html lang="en">
<head>
  <title>Reset Password | CodeCollab</title>
  <%- include('head-scripts') %>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  <script type="module" src="https://unpkg.com/@splinetool/viewer@1.10.24/build/spline-viewer.js"></script>
  <script src="/js/css-fallback.js"></script>
  <style>
    body {
      min-height: 100vh;
      background-color: #f5f7fa;
    }

    .gradient-bg {
      height: 100vh !important;
      position: fixed !important;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }

    .spline-container {
      height: 100vh !important;
    }
  </style>
</head>
<body>
  <!-- Spline Background (lazy loaded) -->
  <div class="spline-container">
    <div id="spline-placeholder"></div>
  </div>

  <!-- Lightweight gradient background (alternative) -->
  <div class="gradient-bg"></div>

  <!-- Theme Toggle Button -->
  <div class="ios-theme-toggle">
    <button id="themeToggle" title="Toggle Dark/Light Mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path>
      </svg>
    </button>
  </div>

  <!-- Performance Mode Toggle Button -->
  <div class="ios-performance-toggle">
    <button id="performanceToggle" title="Toggle Performance Mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="4"></circle>
        <path d="M12 2v2M12 20v2M6.3 6.3l1.4 1.4M16.3 16.3l1.4 1.4M2 12h2M20 12h2M6.3 17.7l1.4-1.4M16.3 7.7l1.4-1.4"></path>
      </svg>
    </button>
  </div>

  <!-- Main Container -->
  <div class="ios-auth-container">
    <div class="ios-auth-card">
    <div class="ios-auth-header">
      <h2 style="font-size: 1.5rem; font-weight: 500;">Reset your password</h2>
      <% if (locals.email) { %>
        <p style="color: #666; font-size: 0.9rem; margin-top: 0.5rem;">
          for <%= email %>
        </p>
      <% } %>
    </div>

    <form action="/auth/reset-password" method="POST">
      <input type="hidden" name="token" value="<%= token %>">
      
      <% if (locals.error) { %>
        <div class="ios-error-message" role="alert">
          <%= error %>
        </div>
      <% } %>

      <% if (locals.success) { %>
        <div class="ios-success-message" role="alert">
          <%= success %>
        </div>
      <% } %>

      <div class="ios-form-group">
        <label for="password">New Password</label>
        <input
          type="password"
          class="ios-form-control"
          id="password"
          name="password"
          placeholder="Enter your new password"
          autocomplete="new-password"
          minlength="6"
          required
        >
        <small style="color: #666; font-size: 0.8rem;">
          Password must be at least 6 characters long
        </small>
      </div>

      <div class="ios-form-group">
        <label for="confirmPassword">Confirm New Password</label>
        <input
          type="password"
          class="ios-form-control"
          id="confirmPassword"
          name="confirmPassword"
          placeholder="Confirm your new password"
          autocomplete="new-password"
          minlength="6"
          required
        >
      </div>

      <button type="submit" class="ios-btn-primary">
        Reset Password
      </button>
    </form>

    <div style="text-align: center; margin-top: 2rem;">
      <a href="/auth/signin" style="color: #3b82f6; text-decoration: none; font-size: 0.9rem;">Return to sign in</a>
    </div>
    </div>
  </div>

  <style>
    .ios-success-message {
      background-color: #d4edda;
      color: #155724;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 15px;
      border: 1px solid #c3e6cb;
      animation: fadeIn 0.5s;
    }

    .ios-error-message {
      background-color: #f8d7da;
      color: #721c24;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 15px;
      border: 1px solid #f5c6cb;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .password-requirements {
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 6px;
      padding: 12px;
      margin-bottom: 20px;
      font-size: 0.85rem;
      color: #6c757d;
    }

    .password-requirements ul {
      margin: 0;
      padding-left: 20px;
    }

    .password-requirements li {
      margin: 4px 0;
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Global variable to track if Spline is loaded
      window.splineLoaded = window.splineLoaded || false;

      // Function to load Spline viewer
      const loadSpline = () => {
        if (window.splineLoaded) return;

        try {
          const splinePlaceholder = document.getElementById('spline-placeholder');
          // Clear any existing content
          splinePlaceholder.innerHTML = '';

          const splineViewer = document.createElement('spline-viewer');
          splineViewer.setAttribute('url', 'https://prod.spline.design/HAPDwhAWHdkj3Od2/scene.splinecode');
          splineViewer.setAttribute('loading', 'lazy');

          // Add loading event listener
          splineViewer.addEventListener('load', () => {
            console.log('Spline viewer loaded successfully');
            window.splineLoaded = true;
            document.querySelector('.gradient-bg').style.display = 'none';
          });

          // Add error event listener
          splineViewer.addEventListener('error', (e) => {
            console.error('Spline viewer failed to load:', e);
            document.querySelector('.gradient-bg').style.display = 'block';
          });

          splinePlaceholder.appendChild(splineViewer);
        } catch (error) {
          console.error('Error initializing Spline viewer:', error);
          document.querySelector('.gradient-bg').style.display = 'block';
        }
      };

      // Theme toggle functionality
      const themeToggle = document.getElementById('themeToggle');
      const currentTheme = localStorage.getItem('theme') || 'dark';
      
      // Apply saved theme
      document.documentElement.setAttribute('data-theme', currentTheme);
      
      themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
      });

      // Performance toggle functionality
      const performanceToggle = document.getElementById('performanceToggle');
      const performanceMode = localStorage.getItem('performanceMode') === 'true';
      
      if (!performanceMode) {
        loadSpline();
      } else {
        document.querySelector('.gradient-bg').style.display = 'block';
      }
      
      performanceToggle.addEventListener('click', () => {
        const currentMode = localStorage.getItem('performanceMode') === 'true';
        const newMode = !currentMode;
        localStorage.setItem('performanceMode', newMode.toString());
        
        if (newMode) {
          // Switch to performance mode
          document.querySelector('.spline-container').style.display = 'none';
          document.querySelector('.gradient-bg').style.display = 'block';
        } else {
          // Switch to normal mode
          document.querySelector('.spline-container').style.display = 'block';
          loadSpline();
        }
      });

      // Password matching validation
      const passwordField = document.getElementById('password');
      const confirmPasswordField = document.getElementById('confirmPassword');

      function validatePasswords() {
        const password = passwordField.value;
        const confirmPassword = confirmPasswordField.value;

        if (confirmPassword && password !== confirmPassword) {
          confirmPasswordField.setCustomValidity('Passwords do not match');
        } else {
          confirmPasswordField.setCustomValidity('');
        }
      }

      passwordField.addEventListener('input', validatePasswords);
      confirmPasswordField.addEventListener('input', validatePasswords);

      // Form submission
      const form = document.querySelector('form');
      form.addEventListener('submit', function(e) {
        validatePasswords();
        
        const password = passwordField.value;
        const confirmPassword = confirmPasswordField.value;

        if (password.length < 6) {
          e.preventDefault();
          alert('Password must be at least 6 characters long');
          return;
        }

        if (password !== confirmPassword) {
          e.preventDefault();
          alert('Passwords do not match');
          return;
        }
      });
    });
  </script>
</body>
</html>
