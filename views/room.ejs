<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- CodeMirror CSS (fallback) -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/codemirror.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/theme/dracula.min.css">
  <!-- Spline Viewer -->
  <!-- Include project styles -->
  <%- include('style1.ejs') %>
  <%- include('style2.ejs') %>

  <script>
    console.log('ENHANCED ROOM LAYOUT LOADED - <%= new Date().toISOString() %>');
  </script>

  <style>
    /* Room Page Specific Styles */
    body {
      overflow: hidden;
      height: 100vh;
      position: relative;
    }

    /* Spline Background Container */
    .spline-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      overflow: hidden;
      opacity: 0.4;
      filter: brightness(0.4) contrast(1.1) saturate(1.2);
      transition: opacity 0.5s ease;
    }

    /* Fallback gradient background */
    .gradient-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -2;
      background: linear-gradient(125deg, #0a2463, #3e92cc, #2a628f, #3e92cc);
      background-size: 400% 400%;
      animation: gradientBG 15s ease infinite;
      opacity: 0.3;
      transition: opacity 0.5s ease, z-index 0.1s;
      pointer-events: none;
    }

    @keyframes gradientBG {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    .room-container {
      display: flex;
      flex-direction: column;
      height: 100vh;
      position: relative;
      z-index: 1;
      background-color: rgba(15, 15, 25, 0.9);
      backdrop-filter: blur(15px);
    }

    body:not(.dark-mode) .room-container {
      background-color: rgba(255, 255, 255, 0.7);
    }

    .top-navbar {
      padding: 0.5rem 1rem;
      background-color: rgba(20, 20, 30, 0.95);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(70, 70, 90, 0.5);
      z-index: 100;
      color: #e0e0e0;
    }

    .room-name {
      font-weight: 600;
      margin-right: 1rem;
    }

    .room-name[contenteditable="true"]:focus {
      outline: none;
      border-bottom: 2px solid var(--ios-primary);
      padding-bottom: 2px;
    }

    .user-avatars {
      display: flex;
      align-items: center;
    }

    .avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      border: 2px solid white;
      margin-left: -10px;
      background-color: var(--ios-gray-3);
      overflow: hidden;
      position: relative;
    }

    .avatar:first-child {
      margin-left: 0;
    }

    .avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .avatar .online-indicator {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background-color: var(--ios-success);
      border: 1px solid white;
    }

    .main-content {
      display: flex;
      flex: 1;
      overflow: hidden;
    }

    .sidebar {
      width: 250px;
      background-color: rgba(25, 25, 35, 0.95);
      backdrop-filter: blur(5px);
      border-right: 1px solid rgba(70, 70, 90, 0.5);
      color: #e0e0e0;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
    }

    body:not(.dark-mode) .sidebar {
      background-color: rgba(248, 249, 250, 0.8);
    }

    .sidebar-title {
      font-size: 0.9rem;
      font-weight: 600;
      color: var(--ios-gray-1);
      color: #c0c0c0;
    }

    .file-actions .btn {
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }

    .files-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .files-list li {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid rgba(70, 70, 90, 0.3);
      color: #e0e0e0;
      cursor: pointer;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
    }

    .files-list li:hover {
      background-color: rgba(60, 60, 80, 0.5);
    }

    .files-list li.active {
      background-color: rgba(0, 122, 255, 0.3);
      color: #ffffff;
      border-left: 3px solid #007aff;
      padding-left: calc(1rem - 3px);
    }

    .file-icon {
      margin-right: 0.5rem;
      color: #a0a0a0;
    }

    .monaco-editor-container {
      flex: 1;
      overflow: hidden;
      position: relative;
      min-height: 300px;
      display: flex;
    }

    /* Force editor background color */
    .monaco-editor .monaco-editor-background,
    .monaco-editor .margin {
      background-color: rgba(20, 20, 25, 0.95) !important;
    }

    body:not(.dark-mode) .monaco-editor .monaco-editor-background,
    body:not(.dark-mode) .monaco-editor .margin {
      background-color: rgba(255, 255, 255, 0.7) !important;
    }

    #monaco-editor {
      width: 100%;
      height: 100%;
      min-height: 300px;
    }

    .bottom-panel {
      height: 250px;
      display: flex;
      border-top: 1px solid rgba(70, 70, 90, 0.5);
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    }

    .terminal {
      flex: 1;
      background-color: rgba(15, 15, 20, 0.98);
      color: #f0f0f0;
      font-family: 'Consolas', 'Monaco', monospace;
      padding: 0.5rem;
      overflow-y: auto;
    }

    .terminal-input {
      display: flex;
      background-color: transparent;
      border-top: 1px solid #333;
      padding: 0.5rem 0;
    }

    .terminal-input-prompt {
      color: #00b8d4;
      margin-right: 0.5rem;
    }

    .terminal-input-field {
      flex: 1;
      background-color: transparent;
      border: none;
      color: #f0f0f0;
      font-family: 'Consolas', 'Monaco', monospace;
      outline: none;
    }

    .chat-panel {
      width: 300px;
      border-left: 1px solid rgba(70, 70, 90, 0.5);
      display: flex;
      flex-direction: column;
      background-color: rgba(25, 25, 35, 0.95);
      color: #e0e0e0;
      backdrop-filter: blur(5px);
    }

    body:not(.dark-mode) .chat-panel {
      background-color: rgba(248, 249, 250, 0.7);
    }

    .participants-panel {
      border-top: 1px solid rgba(70, 70, 90, 0.5);
      max-height: 150px;
      overflow-y: auto;
    }

    .participants-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .participant-item {
      display: flex;
      align-items: center;
      padding: 0.5rem 1rem;
      border-bottom: 1px solid rgba(70, 70, 90, 0.3);
    }

    .participant-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      margin-right: 0.5rem;
      position: relative;
    }

    .participant-name {
      font-size: 0.9rem;
      flex: 1;
    }

    .participant-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-left: 0.5rem;
    }

    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 0.5rem;
    }

    .chat-input-container {
      display: flex;
      padding: 0.5rem;
      border-top: 1px solid var(--ios-gray-4);
    }

    .chat-input {
      flex: 1;
      border: 1px solid var(--ios-gray-4);
      border-radius: 20px;
      padding: 0.5rem 1rem;
      margin-right: 0.5rem;
    }

    .message {
      margin-bottom: 0.5rem;
      max-width: 80%;
    }

    .message.outgoing {
      align-self: flex-end;
      background-color: #0a84ff;
      color: white;
      border-radius: 18px 18px 0 18px;
      box-shadow: 0 2px 5px rgba(10, 132, 255, 0.3);
      padding: 0.5rem 0.75rem;
    }

    .message.incoming {
      align-self: flex-start;
      background-color: rgba(60, 60, 80, 0.5);
      border-radius: 18px 18px 18px 0;
      color: #e0e0e0;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      padding: 0.5rem 0.75rem;
    }

    .message-sender {
      font-size: 0.8rem;
      font-weight: 600;
      margin-bottom: 0.25rem;
    }

    .message-time {
      font-size: 0.7rem;
      opacity: 0.7;
      margin-top: 0.25rem;
      text-align: right;
    }

    .remote-cursor {
      position: absolute;
      z-index: 1000;
      pointer-events: none;
      font-family: 'Inter', sans-serif;
    }

    .cursor-caret {
      width: 2px;
      height: 18px;
      position: absolute;
      animation: blink 1s infinite;
      border-radius: 1px;
      box-shadow: 0 0 2px rgba(0,0,0,0.3);
    }

    .cursor-label {
      position: absolute;
      padding: 3px 8px;
      border-radius: 6px;
      font-size: 11px;
      font-weight: 500;
      white-space: nowrap;
      color: white;
      transform: translateY(-100%);
      opacity: 0.95;
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
      margin-top: -2px;
      margin-left: -4px;
      max-width: 120px;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    @keyframes blink {
      0%, 100% { opacity: 1; }
      50% { opacity: 0; }
    }

    /* Dark mode adjustments */
    body.dark-mode .top-navbar {
      background-color: var(--ios-dark-card-bg);
      border-bottom-color: var(--ios-gray-1);
    }

    body.dark-mode .sidebar {
      background-color: #1e1e1e;
      border-right-color: var(--ios-gray-1);
    }

    body.dark-mode .files-list li {
      border-bottom-color: var(--ios-gray-1);
    }

    body.dark-mode .files-list li:hover {
      background-color: #2d2d2d;
    }

    body.dark-mode .chat-input {
      background-color: #2d2d2d;
      color: var(--ios-dark-text);
      border-color: var(--ios-gray-1);
    }

    body.dark-mode .message.incoming {
      background-color: #2d2d2d;
      color: var(--ios-dark-text);
    }

    /* Responsive adjustments */
    @media (max-width: 992px) {
      .sidebar {
        width: 200px;
      }

      .chat-panel {
        width: 250px;
      }

      .sidebar {
        width: 200px;
      }
    }

    @media (max-width: 768px) {
      .main-content {
        flex-direction: column;
      }

      .sidebar {
        width: 100%;
        height: auto;
        max-height: 150px;
        border-right: none;
        border-bottom: 1px solid var(--ios-gray-4);
      }

      .bottom-panel {
        flex-direction: column;
        height: auto;
      }

      .terminal, .chat-panel {
        width: 100%;
        height: 150px;
      }

      .chat-panel {
        border-left: none;
        border-top: 1px solid var(--ios-gray-4);
      }
    }

    /* Theme toggle button */
    .theme-toggle {
      background: none;
      border: none;
      color: var(--ios-gray-1);
      font-size: 1.2rem;
      cursor: pointer;
      padding: 0.5rem;
      margin-left: 0.5rem;
    }

    /* Collapse/expand button for chat */
    .collapse-btn {
      background: none;
      border: none;
      color: var(--ios-gray-1);
      cursor: pointer;
      padding: 0.5rem;
    }

    /* Simple notification popup - bottom right */
    .mode-notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #333;
      color: white;
      padding: 12px 16px;
      border-radius: 6px;
      font-size: 14px;
      z-index: 9999;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      animation: slideUp 0.3s ease-out;
      max-width: 300px;
    }

    .mode-notification.success {
      background: #22c55e;
    }

    .mode-notification.error {
      background: #ef4444;
    }

    .mode-notification.info {
      background: #3b82f6;
    }

    .mode-notification.warning {
      background: #f59e0b;
    }

    @keyframes slideUp {
      from {
        transform: translateY(100%);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    @keyframes slideDown {
      from {
        transform: translateY(0);
        opacity: 1;
      }
      to {
        transform: translateY(100%);
        opacity: 0;
      }
    }

    .mode-notification.fade-out {
      animation: slideDown 0.3s ease-in forwards;
    }
  </style>
</head>
<body class="dark-mode">
  <!-- Spline Background -->
  <div class="spline-container">
    <spline-viewer url="https://prod.spline.design/HAPDwhAWHdkj3Od2/scene.splinecode"></spline-viewer>
  </div>

  <!-- Fallback Gradient Background -->
  <div class="gradient-bg"></div>

  <div class="room-container">
    <!-- Top Navbar -->
    <div class="top-navbar d-flex justify-content-between align-items-center shadow-sm mb-1">
      <div class="d-flex align-items-center">
        <h4 class="room-name mb-0" contenteditable="<%= roomData.createdBy === (req.user._id || req.user.id || req.user.googleId) ? 'true' : 'false' %>">
          <%= roomData.name %>
        </h4>
        <span class="badge bg-secondary ms-2 text-xs">ID: <%= roomData.id %></span>
        <div class="user-avatars ms-3">
          <div class="avatar">
            <img src="<%= req.user.picture || 'https://ui-avatars.com/api/?name=' + req.user.username %>" alt="Your avatar">
            <div class="online-indicator"></div>
          </div>
          <div id="remote-avatars"></div>
        </div>
        <span class="ms-2 text-muted">
          <i class="fas fa-users"></i> <span id="online-count">1</span> online
        </span>
      </div>
      <div class="d-flex align-items-center">
        <div class="dropdown me-3">
          <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown">
            <i class="fas fa-code"></i> <span id="selected-language"><%= roomData.language %></span>
          </button>
          <ul class="dropdown-menu" aria-labelledby="languageDropdown">
            <li><a class="dropdown-item language-option" data-language="javascript" href="#">JavaScript</a></li>
            <li><a class="dropdown-item language-option" data-language="typescript" href="#">TypeScript</a></li>
            <li><a class="dropdown-item language-option" data-language="python" href="#">Python</a></li>
            <li><a class="dropdown-item language-option" data-language="java" href="#">Java</a></li>
            <li><a class="dropdown-item language-option" data-language="csharp" href="#">C#</a></li>
            <li><a class="dropdown-item language-option" data-language="cpp" href="#">C++</a></li>
            <li><a class="dropdown-item language-option" data-language="php" href="#">PHP</a></li>
            <li><a class="dropdown-item language-option" data-language="ruby" href="#">Ruby</a></li>
            <li><a class="dropdown-item language-option" data-language="go" href="#">Go</a></li>
            <li><a class="dropdown-item language-option" data-language="rust" href="#">Rust</a></li>
            <li><a class="dropdown-item language-option" data-language="html" href="#">HTML</a></li>
            <li><a class="dropdown-item language-option" data-language="css" href="#">CSS</a></li>
            <li><a class="dropdown-item language-option" data-language="sql" href="#">SQL</a></li>
          </ul>
        </div>
        <button class="btn btn-sm btn-dark me-2" id="add-file">
          <i class="fas fa-plus"></i> New File
        </button>
        <button class="btn btn-sm btn-dark me-2" id="copy-link">
          <i class="fas fa-link"></i> Copy Link
        </button>
        <button class="btn btn-sm btn-primary me-2" id="run-code">
          <i class="fas fa-play"></i> Run
        </button>
        <button class="btn btn-sm btn-outline-danger" id="leave-room">Leave</button>
        <button class="theme-toggle" id="theme-toggle">
          <i class="fas fa-moon"></i>
        </button>
        <button class="btn btn-sm btn-dark ms-2" id="toggle-performance" title="Toggle performance mode">
          <i class="fas fa-bolt"></i>
        </button>
      </div>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">
      <!-- Sidebar for Files -->
      <div class="sidebar">
        <div class="d-flex justify-content-between align-items-center p-3 border-bottom">
          <h6 class="sidebar-title mb-0">Files</h6>
          <div class="file-actions">
            <button class="btn btn-sm btn-outline-primary me-1" id="save-file" title="Save current file">
              <i class="fas fa-save"></i>
            </button>
            <button class="btn btn-sm btn-outline-danger" id="close-file" title="Close current file">
              <i class="fas fa-times"></i>
            </button>
          </div>
        </div>
        <ul class="files-list" id="files-list">
          <% roomData.files.forEach((file, index) => { %>
            <li class="<%= index === 0 ? 'active' : '' %>" data-file-index="<%= index %>">
              <% if (file.type === 'js') { %>
                <i class="file-icon fab fa-js-square"></i>
              <% } else if (file.type === 'html') { %>
                <i class="file-icon fab fa-html5"></i>
              <% } else if (file.type === 'css') { %>
                <i class="file-icon fab fa-css3-alt"></i>
              <% } else { %>
                <i class="file-icon far fa-file-code"></i>
              <% } %>
              <%= file.name %>
            </li>
          <% }); %>
        </ul>
      </div>

      <!-- Monaco Editor -->
      <div class="monaco-editor-container">
        <div id="monaco-editor" style="width: 100%; height: 100%; min-height: 300px; display: none;">
          <!-- Monaco editor will be loaded here -->
        </div>
        <!-- CodeMirror editor (fallback) -->
      </div>
    </div>

    <!-- Bottom Panel -->
    <div class="bottom-panel">
      <!-- Terminal Output -->
      <div class="terminal" id="terminal">
        > Welcome to CodeCollab Terminal
        > Run your code to see output here...
        <div class="terminal-input">
          <span class="terminal-input-prompt">$</span>
          <input type="text" class="terminal-input-field" id="terminal-input" placeholder="Enter bash command..." spellcheck="false">
        </div>
      </div>

      <!-- Chat Panel -->
      <div class="chat-panel">
        <div class="d-flex justify-content-between align-items-center p-2 border-bottom">
          <h6 class="mb-0 text-light">Chat</h6>
          <button class="collapse-btn text-light" id="collapse-chat">
            <i class="fas fa-chevron-right"></i>
          </button>
        </div>
        <div class="chat-messages d-flex flex-column" id="chat-messages">
          <!-- Messages will be added here dynamically -->
        </div>
        <div class="chat-input-container">
          <input type="text" class="chat-input" id="chat-input" placeholder="Type a message...">
          <button class="btn btn-sm btn-primary" id="send-message">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
        <!-- Participants Panel -->
        <div class="participants-panel">
          <div class="d-flex justify-content-between align-items-center p-2">
            <h6 class="mb-0 text-light">Participants</h6>
            <span class="badge bg-primary rounded-pill" id="participants-count">1</span>
          </div>
          <ul class="participants-list" id="participants-list">
            <!-- Current user - added with ID for consistency -->
            <li class="participant-item" id="participant-<%= req.user._id || req.user.id || req.user.googleId %>">
              <img src="<%= req.user.picture || 'https://ui-avatars.com/api/?name=' + req.user.username %>" alt="Your avatar" class="participant-avatar">
              <span class="participant-name"><%= req.user.username || req.user.displayName || req.user.email.split("@")[0] %> (You)</span>
              <div class="participant-color" style="background-color: #007aff;"></div>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Socket.io -->
  <script src="/socket.io/socket.io.js"></script>

  <!-- Required JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- CodeMirror (reliable fallback) -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/codemirror.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/javascript/javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/python/python.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/htmlmixed/htmlmixed.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/css/css.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/clike/clike.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/php/php.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/ruby/ruby.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.12/mode/sql/sql.min.js"></script>

  <!-- Direct Monaco Editor Loading (attempt) -->
  <script src="https://unpkg.com/monaco-editor@latest/min/vs/loader.js"></script>
  <script>
    // Monaco uses AMD module system
    require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' }});
    window.MonacoEnvironment = { getWorkerUrl: () => proxy };

    let proxy = URL.createObjectURL(new Blob([`
      self.MonacoEnvironment = {
        baseUrl: 'https://unpkg.com/monaco-editor@latest/min/'
      };
      importScripts('https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js');
    `], { type: 'text/javascript' }));
  </script>

  <script>
    // User and Room data
    const userId = '<%= req.user._id || req.user.id || req.user.googleId %>';
    const username = '<%= req.user.username || req.user.displayName || req.user.email.split("@")[0] %>';
    const roomId = '<%= roomData.id %>';
    const userPicture = '<%= req.user.picture || `https://ui-avatars.com/api/?name=${req.user.username || req.user.displayName || req.user.email.split("@")[0]}` %>';
    let currentLanguage = '<%= roomData.language %>';
    let currentFileIndex = 0;
    let editor = null;
    let socket = null;
    let remoteCursors = {};
    let performanceMode = localStorage.getItem('codecollab-performance-mode') === 'true';
    let files = <%- JSON.stringify(roomData.files) %>;
    // Variable to store the terminal input handler function
    let handleTerminalInput;
    // Flag to track local typing to prevent cursor conflicts
    let isLocalTyping = false;

    // Initialize Socket.IO connection
    function initializeSocket() {
      socket = io({
        transports: ['websocket'],
        upgrade: false
      });

      // Socket connection events
      socket.on('connect', () => {
        console.log('Connected to server with socket ID:', socket.id);

        // Join the room
        socket.emit('join_room', {
          roomId,
          userId,
          username,
          picture: userPicture,
          language: currentLanguage
        });

        // Request current cursor positions
        socket.emit('request_cursor_positions', { roomId });
      });

      socket.on('disconnect', () => {
        console.log('Disconnected from server');
        // You might want to show a reconnection message
        addSystemMessage('Disconnected from server. Trying to reconnect...');
      });

      // Room events
      socket.on('user_joined', (data) => {
        console.log('User joined:', data);
        document.getElementById('online-count').textContent = data.userCount || 1;
        document.getElementById('participants-count').textContent = data.userCount || 1;

        // Only add to UI if it's not the current user
        if (data.userId !== userId) {
          // Add user avatar to the list if not already there
          addRemoteAvatar(data.userId, data.username, data.picture);

          // Add user to participants list
          addParticipant(data.userId, data.username, data.picture, data.color);

          // Add system message to chat
          addSystemMessage(`${data.username} joined the room`);

          // Send our current cursor position to the new user
          if (socket && editor) {
            setTimeout(() => {
              socket.emit('cursor_move', {
                roomId,
                userId,
                username,
                cursorPosition: editor.getPosition()
              });
            }, 500);
          }
        } else {
          console.log('Ignoring own join event for participant list');
          // Request cursor positions when we join
          setTimeout(() => {
            socket.emit('request_cursor_positions', { roomId });
          }, 1000);
        }
      });

      socket.on('user_left', (data) => {
        console.log('User left:', data);
        document.getElementById('online-count').textContent = data.userCount || 1;
        document.getElementById('participants-count').textContent = data.userCount || 1;

        // Remove user avatar from the list
        removeRemoteAvatar(data.userId);

        // Remove user cursor
        removeRemoteCursor(data.userId);

        // Remove from participants list
        removeParticipant(data.userId);

        // Add system message to chat
        addSystemMessage(`${data.username} left the room`);
      });

      // Code events
      socket.on('code_updated', (data) => {
        if (!editor) return;
        if (data.userId === userId) return;
        if (isLocalTyping) return; // Don't overwrite while local user is typing

        const currentValue = editor.getValue();
        if (currentValue !== data.code) {
          const position = editor.getPosition();
          const selections = editor.getSelections();
          editor.setValue(data.code);
          if (position) editor.setPosition(position);
          if (selections) editor.setSelections(selections);
          
          // Update all remote cursor positions after code change
          setTimeout(() => {
            updateAllRemoteCursorPositions();
          }, 50);
        }
      });

      // Language events
      socket.on('language_changed', (data) => {
        if (data.userId === userId) return;

        currentLanguage = data.language;
        document.getElementById('selected-language').textContent = data.language;

        // Update editor language
        monaco.editor.setModelLanguage(editor.getModel(), mapLanguage(data.language));

        // Add system message to chat
        addSystemMessage(`${data.username} changed language to ${data.language}`);
      });

      // Cursor events
      socket.on('cursor_updated', (data) => {
        if (data.userId === userId) return;
        
        console.log('Received cursor update:', data);
        updateRemoteCursor(data.userId, data.username, data.cursorPosition, data.color);
      });

      // Current cursors positions (after requesting)
      socket.on('cursor_positions', (data) => {
        const { cursors } = data;
        console.log('Received cursor positions:', cursors);

        // Update all remote cursors
        for (const cursor of cursors) {
          if (cursor.userId !== userId) {
            updateRemoteCursor(cursor.userId, cursor.username, cursor.position, cursor.color);
          }
        }
      });

      // Chat messages
      socket.on('new_message', (data) => {
        const isOwnMessage = data.userId === userId;
        addChatMessage(data, isOwnMessage);
      });

      // Run code results
      socket.on('code_result', (data) => {
        displayCodeResult(data);
      });

      // New file created by another user
      socket.on('file_added', (data) => {
        if (data.userId === userId) return;

        // Add the file to our local files array
        const newFileIndex = files.length;
        files.push(data.file);

        // Add file to the list
        const filesList = document.getElementById('files-list');
        const li = document.createElement('li');
        li.setAttribute('data-file-index', newFileIndex);

        // Determine icon based on file type
        let iconClass = 'far fa-file-code';
        if (data.file.type === 'javascript') iconClass = 'fab fa-js-square';
        else if (data.file.type === 'html') iconClass = 'fab fa-html5';
        else if (data.file.type === 'css') iconClass = 'fab fa-css3-alt';
        else if (data.file.type === 'python') iconClass = 'fab fa-python';

        li.innerHTML = `<i class="file-icon ${iconClass}"></i> ${data.file.name}`;
        filesList.appendChild(li);

        // Add click event
        li.addEventListener('click', function() {
          const fileIndex = parseInt(this.getAttribute('data-file-index'));
          switchFile(fileIndex);
        });

        // Add system message to chat
        addSystemMessage(`${data.username} created a new file: ${data.file.name}`);
      });

      // File saved by another user
      socket.on('file_saved', (data) => {
        if (data.userId === userId) return;
        addSystemMessage(`${data.username} saved ${data.fileName}`);
      });

      // File closed by another user
      socket.on('file_closed', (data) => {
        if (data.userId === userId) return;
        addSystemMessage(`${data.username} closed ${data.fileName}`);
      });

      // Bash command result
      socket.on('bash_result', (data) => {
        const terminal = document.getElementById('terminal');
        const inputDiv = terminal.querySelector('.terminal-input');

        // Remove the terminal input temporarily
        if (inputDiv) {
          inputDiv.remove();
        }

        // Add the command output
        if (data.error) {
          terminal.innerHTML += `<span style="color: #ff5252;">${data.error}</span>\n`;
        } else if (data.result) {
          terminal.innerHTML += `${data.result}\n`;
        }

        // Add back the terminal input
        terminal.innerHTML += `<div class="terminal-input">
          <span class="terminal-input-prompt">$</span>
          <input type="text" class="terminal-input-field" id="terminal-input" placeholder="Enter bash command...">
        </div>`;

        // Reattach event listener to new terminal input
        document.getElementById('terminal-input').addEventListener('keydown', handleTerminalInput);

        // Scroll terminal to bottom
        terminal.scrollTop = terminal.scrollHeight;
      });
    }

    // Initialize editors with priority fallback approach
    function initializeEditor() {
  console.log('Initializing Monaco Editor...');

  const files = <%- JSON.stringify(roomData.files) %>;
  const initialFile = files[currentFileIndex];
  const initialContent = initialFile.content || '// Start coding here...';

  // Make sure the container is visible before initializing
  const monacoContainer = document.getElementById('monaco-editor');
  monacoContainer.style.display = 'block';

  // Monaco uses AMD loader, so we need to wait for require to be available
  if (typeof require === 'function') {
    require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' } });
    window.MonacoEnvironment = {
      getWorkerUrl: function (moduleId, label) {
        return proxy;
      }
    };
    let proxy = URL.createObjectURL(new Blob([`
      self.MonacoEnvironment = { baseUrl: 'https://unpkg.com/monaco-editor@latest/min/' };
      importScripts('https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js');
    `], { type: 'text/javascript' }));

    require(['vs/editor/editor.main'], function () {
      try {
        editor = monaco.editor.create(monacoContainer, {
          value: initialContent,
          language: mapLanguage(initialFile.type),
          theme: document.body.classList.contains('dark-mode') ? 'vs-dark' : 'vs',
          automaticLayout: true,
          fontSize: 14,
          minimap: { enabled: true }
        });

        editor.onDidChangeModelContent(() => {
          isLocalTyping = true;
          if (socket) {
            const position = editor.getPosition();
            socket.emit('code_change', {
              roomId,
              code: editor.getValue(),
              language: currentLanguage,
              userId,
              username,
              cursorPosition: position
            });
          }
          
          // Update all remote cursor positions after content change
          setTimeout(() => {
            updateAllRemoteCursorPositions();
            isLocalTyping = false;
          }, 100);
        });

        editor.onDidChangeCursorPosition(() => {
          if (socket) {
            const position = editor.getPosition();
            console.log('Sending cursor position:', position);
            socket.emit('cursor_move', {
              roomId,
              userId,
              username,
              cursorPosition: position
            });
          }
        });

        // Listen for scroll events to update cursor positions
        editor.onDidScrollChange(() => {
          setTimeout(() => {
            updateAllRemoteCursorPositions();
          }, 10);
        });

        showNotification('Monaco Editor loaded', 'success');
      } catch (e) {
        console.error('Monaco initialization failed:', e);
        monacoContainer.style.display = 'none';
        showNotification('Monaco Editor failed to load, using fallback editor.', 'error');
        // Optionally, initialize CodeMirror fallback here
      }
    }, function (err) {
      console.error('Monaco require failed:', err);
      monacoContainer.style.display = 'none';
      showNotification('Monaco Editor failed to load, using fallback editor.', 'error');
      // Optionally, initialize CodeMirror fallback here
    });
  } else {
    console.error('Monaco AMD loader not available');
    monacoContainer.style.display = 'none';
    showNotification('Monaco Editor loader not available, using fallback editor.', 'warning');
    // Optionally, initialize CodeMirror fallback here
  }
}

    // Helper function to map language names
    function mapLanguage(language) {
      const map = {
        'js': 'javascript',
        'javascript': 'javascript',
        'ts': 'typescript',
        'typescript': 'typescript',
        'py': 'python',
        'python': 'python',
        'java': 'java',
        'c#': 'csharp',
        'csharp': 'csharp',
        'c++': 'cpp',
        'cpp': 'cpp',
        'php': 'php',
        'rb': 'ruby',
        'ruby': 'ruby',
        'go': 'go',
        'rust': 'rust',
        'html': 'html',
        'css': 'css',
        'sql': 'sql'
      };

      return map[language.toLowerCase()] || 'plaintext';
    }

    // Update remote cursor
    function updateRemoteCursor(remoteUserId, remoteUsername, position, color) {
      if (!position) return;

      // If cursor doesn't exist, create it
      if (!remoteCursors[remoteUserId]) {
        // Create cursor element
        const cursorDiv = document.createElement('div');
        cursorDiv.className = `remote-cursor cursor-${remoteUserId}`;
        cursorDiv.style.position = 'absolute';
        cursorDiv.style.zIndex = '1000';
        cursorDiv.style.pointerEvents = 'none';

        // Create cursor caret
        const caretDiv = document.createElement('div');
        caretDiv.className = 'cursor-caret';
        caretDiv.style.backgroundColor = color || getRandomColor(remoteUserId);

        // Create cursor label
        const labelDiv = document.createElement('div');
        labelDiv.className = 'cursor-label';
        labelDiv.textContent = remoteUsername;
        labelDiv.style.backgroundColor = color || getRandomColor(remoteUserId);

        // Append elements
        cursorDiv.appendChild(caretDiv);
        cursorDiv.appendChild(labelDiv);
        
        // Find the best container for the cursor
        let targetContainer = null;
        
        // Try to find Monaco's view lines container (best option)
        const viewLines = document.querySelector('.monaco-editor .view-lines');
        if (viewLines) {
          targetContainer = viewLines;
        } else {
          // Fallback to the editor's viewport
          const viewport = document.querySelector('.monaco-editor .monaco-scrollable-element');
          if (viewport) {
            targetContainer = viewport;
          } else {
            // Last resort: the main editor container
            targetContainer = document.querySelector('.monaco-editor-container');
          }
        }

        if (targetContainer) {
          targetContainer.appendChild(cursorDiv);
        } else {
          console.warn('Could not find suitable container for remote cursor');
          return;
        }

        // Store cursor reference
        remoteCursors[remoteUserId] = {
          element: cursorDiv,
          username: remoteUsername,
          color: color || getRandomColor(remoteUserId),
          lastPosition: position
        };
      } else {
        // Update existing cursor's position
        remoteCursors[remoteUserId].lastPosition = position;
      }

      // Position the cursor
      positionCursor(remoteUserId, position);
    }

    // Position cursor at specific coordinates
    function positionCursor(userId, position) {
      if (!remoteCursors[userId] || !position || !editor) return;

      const cursor = remoteCursors[userId].element;
      
      try {
        // Ensure position has the correct format
        const cursorPosition = {
          lineNumber: position.lineNumber || 1,
          column: position.column || 1
        };

        // Get the coordinates of the position in the editor
        const coordinates = editor.getScrolledVisiblePosition(cursorPosition);

        if (coordinates && coordinates.left !== undefined && coordinates.top !== undefined) {
          // Position relative to the editor container
          cursor.style.left = `${coordinates.left}px`;
          cursor.style.top = `${coordinates.top}px`;
          cursor.style.display = 'block';

          // Update caret height to match line height
          const lineHeight = editor.getOption(monaco.editor.EditorOption.lineHeight) || 18;
          const caret = cursor.querySelector('.cursor-caret');
          if (caret) {
            caret.style.height = `${lineHeight}px`;
          }

          // Make sure the label is visible and positioned correctly
          const label = cursor.querySelector('.cursor-label');
          if (label) {
            label.style.transform = 'translateY(-100%)';
            label.style.visibility = 'visible';
          }

          // Add debug logging
          if (Math.random() < 0.1) { // Only log 10% of the time to avoid spam
            debugCursorPosition(userId, position);
          }
        } else {
          // Hide cursor if position is not visible in current viewport
          cursor.style.display = 'none';
        }
      } catch (error) {
        console.log('Error positioning cursor:', error);
        cursor.style.display = 'none';
      }
    }

    // Update all remote cursor positions
    function updateAllRemoteCursorPositions() {
      if (!editor) return;
      
      Object.keys(remoteCursors).forEach(userId => {
        const cursor = remoteCursors[userId];
        if (cursor && cursor.lastPosition) {
          positionCursor(userId, cursor.lastPosition);
        }
      });
    }

    // Debug function for cursor positioning
    function debugCursorPosition(userId, position) {
      console.log(`Positioning cursor for user ${userId}:`, {
        position,
        editorExists: !!editor,
        cursorExists: !!remoteCursors[userId],
        viewportDimensions: editor ? {
          width: editor.getLayoutInfo().width,
          height: editor.getLayoutInfo().height
        } : null
      });
    }

    // Remove remote cursor
    function removeRemoteCursor(userId) {
      if (remoteCursors[userId]) {
        remoteCursors[userId].element.remove();
        delete remoteCursors[userId];
      }
    }

    // Get random color for cursor based on userId
    function getRandomColor(userId) {
      // Create a consistent color based on the userId
      let hash = 0;
      for (let i = 0; i < userId.length; i++) {
        hash = userId.charCodeAt(i) + ((hash << 5) - hash);
      }

      const colors = [
        '#FF5252', '#FF4081', '#E040FB', '#7C4DFF',
        '#536DFE', '#448AFF', '#40C4FF', '#18FFFF',
        '#64FFDA', '#69F0AE', '#B2FF59', '#EEFF41',
        '#FFFF00', '#FFD740', '#FFAB40', '#FF6E40'
      ];

      return colors[Math.abs(hash) % colors.length];
    }

    // Add participant to the list
    function addParticipant(userId, username, picture, color) {
      console.log('Adding participant:', userId, username);
      // Skip if already in the list
      if (document.getElementById(`participant-${userId}`)) {
        console.log('Participant already exists:', userId);
        return;
      }

      const userColor = color || getRandomColor(userId);
      const participantsList = document.getElementById('participants-list');

      if (!participantsList) {
        console.error('Participants list not found!');
        return;
      }

      const li = document.createElement('li');
      li.className = 'participant-item';
      li.id = `participant-${userId}`;

      li.innerHTML = `
        <img src="${picture || `https://ui-avatars.com/api/?name=${username}`}" alt="${username}" class="participant-avatar">
        <span class="participant-name">${username}</span>
        <div class="participant-color" style="background-color: ${userColor};"></div>
      `;

      participantsList.appendChild(li);
      console.log('Participant added to list:', username);

      // Update the count
      const count = participantsList.querySelectorAll('.participant-item').length;
      document.getElementById('participants-count').textContent = count;
      console.log('Updated participant count:', count);
    }

    // Remove participant from the list
    function removeParticipant(userId) {
      console.log('Removing participant:', userId);
      const participant = document.getElementById(`participant-${userId}`);
      if (participant) {
        participant.remove();
        console.log('Participant removed from list:', userId);

        // Update the count
        const count = document.getElementById('participants-list').querySelectorAll('.participant-item').length;
        document.getElementById('participants-count').textContent = count;
        console.log('Updated participant count after removal:', count);
      } else {
        console.log('Participant not found for removal:', userId);
      }
    }

    // Add remote user avatar
    function addRemoteAvatar(remoteUserId, remoteUsername, remotePicture) {
      if (document.getElementById(`avatar-${remoteUserId}`)) return;

      const avatarDiv = document.createElement('div');
      avatarDiv.className = 'avatar';
      avatarDiv.id = `avatar-${remoteUserId}`;
      avatarDiv.innerHTML = `
        <img src="${remotePicture || `https://ui-avatars.com/api/?name=${remoteUsername}`}" alt="${remoteUsername}">
        <div class="online-indicator"></div>
      `;

      document.getElementById('remote-avatars').appendChild(avatarDiv);
    }

    // Remove remote user avatar
    function removeRemoteAvatar(remoteUserId) {
      const avatar = document.getElementById(`avatar-${remoteUserId}`);
      if (avatar) {
        avatar.remove();
      }
    }

    // Add message to chat
    function addChatMessage(data, isOwnMessage) {
      const { username, message, timestamp, picture } = data;
      const time = new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${isOwnMessage ? 'outgoing' : 'incoming'} mb-2`;

      messageDiv.innerHTML = `
        ${!isOwnMessage ? `<div class="message-sender">${username}</div>` : ''}
        <div class="message-content">${message}</div>
        <div class="message-time">${time}</div>
      `;

      const chatMessages = document.getElementById('chat-messages');
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Add system message to chat
    function addSystemMessage(message) {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'text-center my-2';
      messageDiv.innerHTML = `<small class="text-muted">${message}</small>`;

      const chatMessages = document.getElementById('chat-messages');
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Display code execution result
    function displayCodeResult(data) {
      const { result, error } = data;
      const terminal = document.getElementById('terminal');
      const inputDiv = terminal.querySelector('.terminal-input');

      // Remove the terminal input temporarily
      if (inputDiv) {
        inputDiv.remove();
      }

      if (error) {
        terminal.innerHTML += `\n<span style="color: #ff5252;">> Error: ${error}</span>`;
      } else {
        terminal.innerHTML += `\n> ${result}`;
      }

      // Add back the terminal input
      terminal.innerHTML += `<div class="terminal-input">
        <span class="terminal-input-prompt">$</span>
        <input type="text" class="terminal-input-field" id="terminal-input" placeholder="Enter bash command...">
      </div>`;

      // Reattach event listener to new terminal input
      document.getElementById('terminal-input').addEventListener('keydown', handleTerminalInput);

      terminal.scrollTop = terminal.scrollHeight;
    }

    // Switch file in editor
    function switchFile(fileIndex) {
      const file = files[fileIndex];

      if (file) {
        currentFileIndex = fileIndex;

        // Update editor content and language
        if (editor) {
          editor.setValue(file.content);

          // Check if it's a CodeMirror instance
          if (editor._instance && editor._instance.setOption) {
            // Map file type to CodeMirror mode
            const modeMap = {
              'js': 'javascript',
              'javascript': 'javascript',
              'py': 'python',
              'python': 'python',
              'html': 'htmlmixed',
              'css': 'css',
              'java': 'text/x-java',
              'cpp': 'text/x-c++src',
              'c': 'text/x-csrc',
              'csharp': 'text/x-csharp',
              'php': 'php',
              'ruby': 'ruby',
              'go': 'go',
              'sql': 'sql'
            };
            const mode = modeMap[file.type.toLowerCase()] || 'javascript';
            editor._instance.setOption('mode', mode);
          }
          // Only set language if monaco is available
          else if (typeof monaco !== 'undefined') {
            try {
              monaco.editor.setModelLanguage(editor.getModel(), mapLanguage(file.type));
              // Apply dark theme
              monaco.editor.setTheme('vs-dark');
            } catch (e) {
              console.log('Monaco language setting failed:', e);
            }
          }
        } else {
          // Update fallback editor if the main editor isn't available
          const fallbackEditor = document.getElementById('fallback-editor');
          if (fallbackEditor) {
            fallbackEditor.value = file.content;
          }
        }

        // Update file list selection
        document.querySelectorAll('#files-list li').forEach((li, idx) => {
          if (parseInt(li.getAttribute('data-file-index')) === fileIndex) {
            li.classList.add('active');
          } else {
            li.classList.remove('active');
          }
        });

        // Update language dropdown to match file type
        const languageName = file.type.charAt(0).toUpperCase() + file.type.slice(1);
        document.getElementById('selected-language').textContent = languageName;
        currentLanguage = file.type;

        // Emit event to notify other users
        if (socket) {
          socket.emit('switch_file', {
            roomId,
            userId,
            username,
            fileIndex
          });
        }
      }
    }

    // Document ready
    document.addEventListener('DOMContentLoaded', function() {
      console.log('ENHANCED ROOM LAYOUT DOM LOADED - <%= new Date().toISOString() %>');

      // Make sure editor container is visible with proper dimensions
      const editorContainer = document.querySelector('.monaco-editor-container');
      if (editorContainer) {
        editorContainer.style.height = '100%';
        editorContainer.style.minHeight = '300px';
        editorContainer.style.overflow = 'hidden';
        editorContainer.style.display = 'flex';
        console.log('Editor container dimensions:',
          editorContainer.offsetWidth + 'x' + editorContainer.offsetHeight);
      }

      // Show a loading notification
      showNotification('Loading editor...', 'info');

      // Add a small delay before initializing to ensure DOM is ready
      setTimeout(function() {
        // Initialize editor
        initializeEditor();
      }, 500);

      // Initialize Socket.IO connection
      initializeSocket();

      // Setup UI event handlers
      setupEventHandlers();

      // Toggle dark/light mode
      setupThemeToggle();

      // Apply performance mode if set
      if (performanceMode) {
        document.body.classList.add('performance-mode');
        document.querySelector('.spline-container').style.display = 'none';
        document.querySelector('.gradient-bg').style.opacity = '1';
        document.querySelector('.gradient-bg').style.zIndex = '-1';

        // Show notification
        showNotification('Performance mode enabled', 'info');
      }
    });

    // Show simple notification
    function showNotification(message, type = 'info', duration = 3000) {
      // Remove any existing notifications to prevent stacking
      const existingNotifications = document.querySelectorAll('.mode-notification');
      existingNotifications.forEach(notification => {
        notification.classList.add('fade-out');
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 300);
      });

      // Create new notification
      const notification = document.createElement('div');
      notification.className = `mode-notification ${type}`;
      notification.textContent = message;
      document.body.appendChild(notification);

      // Auto remove after duration
      setTimeout(() => {
        if (notification.parentNode) {
          notification.classList.add('fade-out');
          setTimeout(() => {
            if (notification.parentNode) {
              notification.remove();
            }
          }, 300);
        }
      }, duration);

      // Allow manual dismissal by clicking
      notification.addEventListener('click', () => {
        notification.classList.add('fade-out');
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 300);
      });
    }

    // Setup event handlers for UI elements
    function setupEventHandlers() {
      // Language selection
      document.querySelectorAll('.language-option').forEach(option => {
        option.addEventListener('click', function(e) {
          e.preventDefault();
          const language = this.getAttribute('data-language');
          currentLanguage = language;

          // Update selected language display
          document.getElementById('selected-language').textContent = language;

          // Update editor language
          monaco.editor.setModelLanguage(editor.getModel(), mapLanguage(language));

          // Update current file type
          files[currentFileIndex].type = language;

          // Emit language change event
          if (socket) {
            socket.emit('language_change', {
              roomId,
              language,
              userId,
              username,
              fileIndex: currentFileIndex
            });
          }
        });
      });

      // File selection
      document.querySelectorAll('#files-list li').forEach(li => {
        li.addEventListener('click', function() {
          const fileIndex = parseInt(this.getAttribute('data-file-index'));
          switchFile(fileIndex);
        });
      });

      // Add new file
      document.getElementById('add-file').addEventListener('click', function() {
        const fileName = prompt('Enter file name (with extension):');
        if (!fileName) return;

        // Determine file type and content based on extension
        let fileType = 'plaintext';
        let defaultContent = '';
        
        if (fileName.endsWith('.js')) {
          fileType = 'javascript';
          defaultContent = `// ${fileName} - JavaScript file\nconsole.log('Hello from ${fileName}');`;
        } else if (fileName.endsWith('.py')) {
          fileType = 'python';
          defaultContent = `# ${fileName} - Python file\nprint("Hello from ${fileName}")`;
        } else if (fileName.endsWith('.html')) {
          fileType = 'html';
          defaultContent = `<!DOCTYPE html>\n<html>\n<head>\n    <title>${fileName}</title>\n</head>\n<body>\n    <h1>Hello from ${fileName}</h1>\n</body>\n</html>`;
        } else if (fileName.endsWith('.css')) {
          fileType = 'css';
          defaultContent = `/* ${fileName} - CSS file */\nbody {\n    font-family: Arial, sans-serif;\n}`;
        } else if (fileName.endsWith('.java')) {
          fileType = 'java';
          const className = fileName.replace('.java', '');
          defaultContent = `// ${fileName} - Java file\npublic class ${className} {\n    public static void main(String[] args) {\n        System.out.println("Hello from ${fileName}");\n    }\n}`;
        } else if (fileName.endsWith('.cpp') || fileName.endsWith('.c++')) {
          fileType = 'cpp';
          defaultContent = `// ${fileName} - C++ file\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Hello from ${fileName}" << endl;\n    return 0;\n}`;
        } else if (fileName.endsWith('.c')) {
          fileType = 'c';
          defaultContent = `// ${fileName} - C file\n#include <stdio.h>\n\nint main() {\n    printf("Hello from ${fileName}\\n");\n    return 0;\n}`;
        } else if (fileName.endsWith('.ts')) {
          fileType = 'typescript';
          defaultContent = `// ${fileName} - TypeScript file\nconsole.log('Hello from ${fileName}');`;
        } else if (fileName.endsWith('.go')) {
          fileType = 'go';
          defaultContent = `// ${fileName} - Go file\npackage main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("Hello from ${fileName}")\n}`;
        } else if (fileName.endsWith('.rb')) {
          fileType = 'ruby';
          defaultContent = `# ${fileName} - Ruby file\nputs "Hello from ${fileName}"`;
        } else if (fileName.endsWith('.php')) {
          fileType = 'php';
          defaultContent = `<?php\n// ${fileName} - PHP file\necho "Hello from ${fileName}";\n?>`;
        } else if (fileName.endsWith('.sql')) {
          fileType = 'sql';
          defaultContent = `-- ${fileName} - SQL file\nSELECT 'Hello from ${fileName}' AS message;`;
        } else if (fileName.endsWith('.json')) {
          fileType = 'json';
          defaultContent = `{\n  "message": "Hello from ${fileName}"\n}`;
        } else if (fileName.endsWith('.md')) {
          fileType = 'markdown';
          defaultContent = `# ${fileName}\n\nHello from ${fileName}`;
        } else {
          fileType = 'plaintext';
          defaultContent = `# ${fileName}\nCreated by ${username}`;
        }

        // Add file to the files array
        const newFileIndex = files.length;
        files.push({
          name: fileName,
          type: fileType,
          content: defaultContent
        });

        // Add file to the list
        const filesList = document.getElementById('files-list');
        const li = document.createElement('li');
        li.setAttribute('data-file-index', newFileIndex);

        // Determine icon based on file type
        let iconClass = 'far fa-file-code';
        if (fileType === 'javascript') iconClass = 'fab fa-js-square';
        else if (fileType === 'html') iconClass = 'fab fa-html5';
        else if (fileType === 'css') iconClass = 'fab fa-css3-alt';
        else if (fileType === 'python') iconClass = 'fab fa-python';
        else if (fileType === 'java') iconClass = 'fab fa-java';
        else if (fileType === 'php') iconClass = 'fab fa-php';
        else if (fileType === 'go') iconClass = 'fab fa-golang';
        else if (fileType === 'markdown') iconClass = 'fab fa-markdown';

        li.innerHTML = `<i class="file-icon ${iconClass}"></i> ${fileName}`;
        filesList.appendChild(li);

        // Add click event
        li.addEventListener('click', function() {
          const fileIndex = parseInt(this.getAttribute('data-file-index'));
          switchFile(fileIndex);
        });

        // Switch to the new file
        switchFile(newFileIndex);

        // Notify other users
        if (socket) {
          socket.emit('new_file', {
            roomId,
            userId,
            username,
            file: {
              name: fileName,
              type: fileType,
              content: defaultContent,
              index: newFileIndex
            }
          });
        }
      });

      // Save file functionality
      document.getElementById('save-file').addEventListener('click', function() {
        if (!editor || files.length === 0) return;

        // Update current file content
        files[currentFileIndex].content = editor.getValue();
        
        // Show save notification
        showNotification(`${files[currentFileIndex].name} saved successfully!`, 'success');

        // Optionally, you could emit a save event to other users
        if (socket) {
          socket.emit('file_saved', {
            roomId,
            userId,
            username,
            fileName: files[currentFileIndex].name,
            fileIndex: currentFileIndex
          });
        }
      });

      // Close file functionality
      document.getElementById('close-file').addEventListener('click', function() {
        if (files.length <= 1) {
          showNotification('Cannot close the last file!', 'warning');
          return;
        }

        if (confirm(`Are you sure you want to close ${files[currentFileIndex].name}?`)) {
          const closedFileName = files[currentFileIndex].name;
          const closedFileIndex = currentFileIndex;

          // Remove from files array
          files.splice(currentFileIndex, 1);

          // Remove from file list UI
          const fileItem = document.querySelector(`[data-file-index="${currentFileIndex}"]`);
          if (fileItem) {
            fileItem.remove();
          }

          // Update all file indices
          document.querySelectorAll('#files-list li').forEach((li, index) => {
            li.setAttribute('data-file-index', index);
          });

          // Switch to previous file or first file
          const newIndex = currentFileIndex > 0 ? currentFileIndex - 1 : 0;
          currentFileIndex = newIndex;
          switchFile(newIndex);

          // Show notification
          showNotification(`${closedFileName} closed successfully!`, 'info');

          // Notify other users
          if (socket) {
            socket.emit('file_closed', {
              roomId,
              userId,
              username,
              fileName: closedFileName,
              fileIndex: closedFileIndex
            });
          }
        }
      });

      // Chat functionality
      const chatInput = document.getElementById('chat-input');
      const sendButton = document.getElementById('send-message');

      function sendMessage() {
        const message = chatInput.value.trim();
        if (message && socket) {
          socket.emit('send_message', {
            roomId,
            userId,
            username,
            picture: userPicture,
            message,
            timestamp: new Date().toISOString()
          });
          chatInput.value = '';
        }
      }

      sendButton.addEventListener('click', sendMessage);
      chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });

      // Copy room link
      document.getElementById('copy-link').addEventListener('click', function() {
        const url = window.location.href;
        navigator.clipboard.writeText(url).then(() => {
          // Show toast notification
          const toast = document.createElement('div');
          toast.className = 'position-fixed bottom-0 end-0 p-3';
          toast.style.zIndex = '5';
          toast.innerHTML = `
            <div class="toast show bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header">
                <strong class="me-auto">CodeCollab</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
              <div class="toast-body">
                Room link copied to clipboard!
              </div>
            </div>
          `;
          document.body.appendChild(toast);

          // Remove after 3 seconds
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 3000);
        });
      });

      // Run code
      document.getElementById('run-code').addEventListener('click', function() {
        if (socket) {
          // Clear terminal first
          const terminal = document.getElementById('terminal');
          const inputDiv = terminal.querySelector('.terminal-input');

          // Remove the terminal input temporarily
          if (inputDiv) {
            inputDiv.remove();
          }

          terminal.innerHTML += '\n> Running code...\n';

          // Preserve terminal input
          terminal.innerHTML += `<div class="terminal-input">
            <span class="terminal-input-prompt">$</span>
            <input type="text" class="terminal-input-field" id="terminal-input" placeholder="Enter bash command..." spellcheck="false">
          </div>`;

          // Reattach event listener to new terminal input
          document.getElementById('terminal-input').addEventListener('keydown', handleTerminalInput);

          socket.emit('run_code', {
            roomId,
            code: editor.getValue(),
            language: currentLanguage,
            userId,
            username,
            fileName: files[currentFileIndex].name
          });
        }
      });

      // Terminal input handling
      handleTerminalInput = function(e) {
        if (e.key === 'Enter') {
          const command = e.target.value.trim();
          if (!command) return;

          // Update terminal with command
          const terminal = document.getElementById('terminal');
          terminal.innerHTML = terminal.innerHTML.replace(/<div class="terminal-input">[\s\S]*?<\/div>/, '');
          terminal.innerHTML += `> ${command}\n`;

          // Execute bash command via socket
          if (socket) {
            socket.emit('bash_command', {
              roomId,
              command,
              userId,
              username
            });
          }

          // Add back the terminal input
          terminal.innerHTML += `<div class="terminal-input">
            <span class="terminal-input-prompt">$</span>
            <input type="text" class="terminal-input-field" id="terminal-input" placeholder="Enter bash command...">
          </div>`;

          // Focus on the new input field
          document.getElementById('terminal-input').focus();

          // Reattach event listener
          document.getElementById('terminal-input').addEventListener('keydown', handleTerminalInput);
        }
      }

      // Initial terminal input setup
      document.getElementById('terminal-input').addEventListener('keydown', handleTerminalInput);

      // Leave room
      document.getElementById('leave-room').addEventListener('click', function() {
        if (confirm('Are you sure you want to leave this room?')) {
          window.location.href = '/dashboard';
        }
      });

      // Toggle chat panel
      document.getElementById('collapse-chat').addEventListener('click', function() {
        const chatPanel = document.querySelector('.chat-panel');
        const icon = this.querySelector('i');

        if (chatPanel.style.width === '0px') {
          chatPanel.style.width = '300px';
          icon.className = 'fas fa-chevron-right';
        } else {
          chatPanel.style.width = '0px';
          icon.className = 'fas fa-chevron-left';
        }

        // Resize editor after changing layout
        if (editor) {
          editor.layout();
        }
      });

      // Toggle performance mode
      document.getElementById('toggle-performance').addEventListener('click', function() {
        performanceMode = !performanceMode;
        localStorage.setItem('codecollab-performance-mode', performanceMode);

        if (performanceMode) {
          document.body.classList.add('performance-mode');
          document.querySelector('.spline-container').style.display = 'none';
          document.querySelector('.gradient-bg').style.opacity = '1';
          document.querySelector('.gradient-bg').style.zIndex = '-1';
          showNotification('Performance mode enabled');
        } else {
          document.body.classList.remove('performance-mode');
          document.querySelector('.spline-container').style.display = 'block';
          document.querySelector('.gradient-bg').style.opacity = '0.3';
          document.querySelector('.gradient-bg').style.zIndex = '-2';
          showNotification('Performance mode disabled');
        }
      });

      // Room name editing (for room owner)
      const roomName = document.querySelector('.room-name');
      if (roomName.getAttribute('contenteditable') === 'true') {
        roomName.addEventListener('blur', function() {
          const newName = this.textContent.trim();
          if (newName && socket) {
            socket.emit('rename_room', {
              roomId,
              name: newName,
              userId
            });
          }
        });

        roomName.addEventListener('keydown', function(e) {
          if (e.key === 'Enter') {
            e.preventDefault();
            this.blur();
          }
        });
      }
    }

    // Toggle between light and dark mode
    function setupThemeToggle() {
      const themeToggle = document.getElementById('theme-toggle');
      const icon = themeToggle.querySelector('i');

      // Check for saved theme preference
      const savedTheme = localStorage.getItem('codecollab-theme');
      if (savedTheme === 'light') {
        document.body.classList.remove('dark-mode');
        icon.className = 'fas fa-moon';

        // Change editor theme
        monaco.editor.setTheme('vs');
      } else {
        // Default to dark mode
        document.body.classList.add('dark-mode');
        localStorage.setItem('codecollab-theme', 'dark');
        icon.className = 'fas fa-sun';

        // Ensure dark theme is applied to editor
        monaco.editor.setTheme('vs-dark');
      }

      themeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');

        if (document.body.classList.contains('dark-mode')) {
          icon.className = 'fas fa-sun';
          localStorage.setItem('codecollab-theme', 'dark');

          // Change editor theme
          monaco.editor.setTheme('vs-dark');
        } else {
          icon.className = 'fas fa-moon';
          localStorage.setItem('codecollab-theme', 'light');

          // Change editor theme
          monaco.editor.setTheme('vs');
        }
      });
    }
  </script>
</body>
</html>
