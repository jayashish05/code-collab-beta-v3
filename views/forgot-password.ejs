<!DOCTYPE html>
<html lang="en">
<head>
  <title>Forgot Password | CodeCollab</title>
  <%- include('head-scripts') %>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  <script type="module" src="https://unpkg.com/@splinetool/viewer@1.10.24/build/spline-viewer.js"></script>
  <script src="/js/css-fallback.js"></script>
  <style>
    body {
      min-height: 100vh;
      background-color: #f5f7fa;
    }

    .gradient-bg {
      height: 100vh !important;
      position: fixed !important;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }

    .spline-container {
      height: 100vh !important;
    }
  </style>
</head>
<body>
  <!-- Spline Background (lazy loaded) -->
  <div class="spline-container">
    <div id="spline-placeholder"></div>
  </div>

  <!-- Lightweight gradient background (alternative) -->
  <div class="gradient-bg"></div>

  <!-- Theme Toggle Button -->
  <div class="ios-theme-toggle">
    <button id="themeToggle" title="Toggle Dark/Light Mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="5"></circle>
        <path d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"></path>
      </svg>
    </button>
  </div>

  <!-- Performance Mode Toggle Button -->
  <div class="ios-performance-toggle">
    <button id="performanceToggle" title="Toggle Performance Mode">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"></path>
      </svg>
    </button>
  </div>

  <div class="ios-container">
    <div class="ios-card">
    <div style="display: flex; justify-content: space-between; margin-bottom: 2rem;">
      <h2 style="font-size: 1.5rem; font-weight: 500;">Reset password</h2>
    </div>

    <form action="/auth/forgot-password" method="POST">
      <% if (locals.error) { %>
        <div class="ios-error-message" role="alert">
          <%= error %>
        </div>
      <% } %>

      <% if (locals.success) { %>
        <div class="ios-success-message" role="alert">
          <%= success %>
        </div>
      <% } %>

      <div class="ios-form-group">
        <label for="email">Email address</label>
        <input
          type="email"
          class="ios-form-control <%= locals.errors && errors.email ? 'error' : '' %>"
          id="email"
          name="email"
          placeholder="Enter your email address"
          value="<%= locals.formData ? formData.email : '' %>"
          autocomplete="email"
          required
        >
        <% if (locals.errors && errors.email) { %>
          <div class="ios-error-message"><%= errors.email %></div>
        <% } %>
      </div>

      <p class="ios-help-text">
        We'll send you a secure link to reset your password. The link will expire after 30 minutes.
      </p>

      <button type="submit" class="ios-btn ios-btn-primary ios-btn-block">
        Reset password
      </button>
    </form>

    <div style="text-align: center; margin-top: 2rem;">
      <a href="/auth/signin" style="color: #3b82f6; text-decoration: none; font-size: 0.9rem;">Return to sign in</a>
    </div>
    </div>
  </div>

  <style>
    .ios-success-message {
      background-color: #d4edda;
      color: #155724;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 15px;
      border: 1px solid #c3e6cb;
      animation: fadeIn 0.5s;
    }

    .ios-error-message {
      background-color: #f8d7da;
      color: #721c24;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 15px;
      border: 1px solid #f5c6cb;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Global variable to track if Spline is loaded
      window.splineLoaded = window.splineLoaded || false;

      // Function to load Spline viewer
      const loadSpline = () => {
        if (window.splineLoaded) return;

        try {
          const splinePlaceholder = document.getElementById('spline-placeholder');
          // Clear any existing content
          splinePlaceholder.innerHTML = '';

          const splineViewer = document.createElement('spline-viewer');
          splineViewer.setAttribute('url', 'https://prod.spline.design/HAPDwhAWHdkj3Od2/scene.splinecode');
          splineViewer.setAttribute('loading', 'lazy');
          splinePlaceholder.appendChild(splineViewer);
          window.splineLoaded = true;
        } catch (err) {
          console.error("Failed to load Spline:", err);
        }
      };

      // Only load Spline after a delay if not in performance mode
      const delayedLoadSpline = () => {
        if (localStorage.getItem('performanceMode') === 'true') {
          setTimeout(loadSpline, 1000);
        }
      };

      // Call the delayed loader
      delayedLoadSpline();

      // Theme toggle functionality
      const themeToggle = document.getElementById('themeToggle');
      let darkMode = false; // Start with light mode for iOS feel

      // Check for saved theme preference
      if (localStorage.getItem('darkMode') === 'true') {
        darkMode = true;
        document.body.classList.add('dark-mode');
      }

      themeToggle.addEventListener('click', () => {
        darkMode = !darkMode;
        document.body.classList.toggle('dark-mode', darkMode);
        localStorage.setItem('darkMode', darkMode);
      });

      // Performance mode toggle
      const performanceToggle = document.getElementById('performanceToggle');
      let performanceMode = localStorage.getItem('performanceMode') === 'true';

      // Function to apply performance mode changes
      const applyPerformanceMode = (enabled) => {
        if (enabled) {
          document.body.classList.add('performance-mode');
          performanceToggle.classList.add('active');

          // If we have a Spline viewer, remove it
          const splinePlaceholder = document.getElementById('spline-placeholder');
          if (splinePlaceholder) {
            splinePlaceholder.innerHTML = '';
            window.splineLoaded = false;
          }
        } else {
          document.body.classList.remove('performance-mode');
          performanceToggle.classList.remove('active');

          // Load Spline when switching to high-performance mode
          loadSpline();
        }
      };

      // Apply performance mode if it was previously enabled
      applyPerformanceMode(performanceMode);

      performanceToggle.addEventListener('click', () => {
        performanceMode = !performanceMode;
        applyPerformanceMode(performanceMode);
        localStorage.setItem('performanceMode', performanceMode.toString());

        // Add notification
        const notification = document.createElement('div');
        notification.className = 'mode-notification';
        notification.textContent = performanceMode ? 'Performance Mode Enabled' : 'Full Graphics Mode Enabled';
        document.body.appendChild(notification);

        // Remove notification after animation
        setTimeout(() => {
          notification.remove();
        }, 2000);
      });
    });
  </script>
</body>
</html>
